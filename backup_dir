#!/usr/bin/env python3
#
# Backup directory with directory synchronization.
# Dependencies: rsync
#
# Version: 1.0.0
# Author: Michal Svorc <dev@michalsvorc.com>
# License: MIT license (https://opensource.org/licenses/MIT)
# Guidelines: https://google.github.io/styleguide/pyguide

import argparse
import logging
import os
import pdb
import subprocess
import sys
from typing import List

DELETE_MODE: bool = True
SOURCE_DIR: str = "/path/to/source/"
TARGET_DIR: str = os.path.dirname(os.path.realpath(__file__))


def main():
    enable_debug_mode()
    args = parse_arguments()
    validate_directory(SOURCE_DIR)
    validate_directory(TARGET_DIR)
    print(f"Source: {SOURCE_DIR}\nTarget: {TARGET_DIR}\n")

    command = construct_command(SOURCE_DIR, TARGET_DIR)

    if args.dry_run:
        print("Performing a trial run with no changes made.")
        command.append("--dry-run")
    if DELETE_MODE:
        print("INFO: Delete mode enabled.")
        command.append("--delete")
    if not prompt_user("Confirm this sync?"):
        print("Aborted.")
        sys.exit(0)

    synchronize(command)


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Backup directory with directory synchronization.",
    )
    parser.add_argument(
        "-n",
        "--dry-run",
        action="store_true",
        help="perform a trial run with no changes made",
    )
    return parser.parse_args()


def validate_directory(path: str | None) -> str:
    if path is None:
        raise InvalidDirectoryError("Path is not provided.")
    if not os.path.isdir(path):
        raise InvalidDirectoryError(path)
    return path


def prompt_user(question="Are you sure?") -> bool:
    positive_answer = "y"
    negative_answer = "N"
    print(f"{question} [{positive_answer}/{negative_answer}] ")

    answer = input().strip().lower()
    return answer == positive_answer


def construct_command(source: str, target: str):
    command = [
        "rsync",
        "--archive",
        "--acls",
        "--xattrs",
        "--hard-links",
        "--verbose",
        "--progress",
        source,
        target,
    ]

    return command


def synchronize(command: List[str]) -> None:
    subprocess.run(command)


def enable_debug_mode():
    debug_env = os.environ.get("DEBUG", "").lower()
    if debug_env in ["1", "true", "yes"]:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug("Debug mode enabled.")
        pdb.set_trace()


class InvalidDirectoryError(Exception):
    def __init__(self, path: str, message: str | None = None):
        if message is None:
            message = f"{path} is not a valid directory."
        self.path = path
        self.message = message
        super().__init__(message)
        logging.error(f"Raised exception: {message}")


if __name__ == "__main__":
    main()
