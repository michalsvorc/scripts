#!/usr/bin/env python3
#
# Synchronize files between local and S3 bucket.
# Dependencies: awscli
#
# Author: Michal Svorc <dev@michalsvorc.com>
# License: MIT license (https://opensource.org/licenses/MIT)
# Guidelines: https://google.github.io/styleguide/pyguide


import argparse
import logging
import os
import pdb
import subprocess
import sys
from enum import Enum
from typing import Dict, List, Tuple

VERSION = "1.0.0"

DELETE_MODE: bool = True
AWS_PROFILE: str = "default"
LOCAL_PATH: str = os.path.dirname(os.path.realpath(__file__))
REMOTE_PATH: str = "s3://bucket-name"


class Command(Enum):
    UP = "up"
    DOWN = "down"


def main():
    enable_debug_mode()
    args = parse_arguments()
    sso_login(AWS_PROFILE)

    try:
        source, target = get_source_and_target(
            args.command, {"local": LOCAL_PATH, "remote": REMOTE_PATH}
        )
        print(f"Source: {source}\nTarget: {target}\n")
    except InvalidCommandError as e:
        logging.error(f"Caught exception: {e.message}.")
        sys.exit(1)

    command = construct_command(AWS_PROFILE)(source, target)
    command_preview_run = command.copy() + ["--dryrun"]

    synchronize(command_preview_run)

    if args.dry_run:
        print("Performing a trial run with no changes made.")
        command.append("--dryrun")
    if DELETE_MODE:
        print("INFO: Delete mode enabled.")
        command.append("--delete")
    if not prompt_user("Confirm this sync?"):
        print("Aborted.")
        sys.exit(0)

    synchronize(command)


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Synchronize files between local and S3 bucket."
    )
    parser.add_argument(
        "command",
        choices=[command.value for command in Command],
        help=f"specify synchronization direction, {Command.UP.value}: to remote, {Command.DOWN.value}: to local",
    )
    parser.add_argument(
        "-v",
        "--version",
        action="version",
        version=f"%(prog)s {VERSION}",
        help="show program version and exit",
    )
    parser.add_argument(
        "-n",
        "--dry-run",
        action="store_true",
        help="perform a trial run with no changes made",
    )
    args = parser.parse_args()
    return args


def get_source_and_target(command: Command, paths: Dict[str, str]) -> Tuple[str, str]:
    local = paths.get("local", "")
    remote = paths.get("remote", "")

    if command == Command.UP.value:
        return local, remote
    elif command == Command.DOWN.value:
        return remote, local
    else:
        raise InvalidCommandError()


def sso_login(profile: str) -> None:
    context = "Logging in to AWS SSO..."
    print(f"{context}. Profile: {profile}")
    command = ["aws", "sso", "login", "--profile", profile]
    result = subprocess.run(command)

    if result.returncode != 0:
        logging.error(f"{context}. Command failed with exit code: {result.returncode}")
        sys.exit(1)


def construct_command(profile: str):
    def with_paths(source: str, target: str) -> List[str]:
        command = [
            "aws",
            "s3",
            "sync",
            "--profile",
            profile,
            "--delete",
            source,
            target,
        ]

        return command

    return with_paths


def synchronize(command: List[str]) -> None:
    subprocess.run(command)


def prompt_user(question="Are you sure?") -> bool:
    positive_answer = "y"
    negative_answer = "N"
    print(f"{question} [{positive_answer}/{negative_answer}] ")

    answer = input().strip().lower()
    return answer == positive_answer


def enable_debug_mode():
    debug_env = os.environ.get("DEBUG", "").lower()
    if debug_env in ["1", "true", "yes"]:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug("Debug mode enabled.")
        pdb.set_trace()


class InvalidCommandError(Exception):
    def __init__(self, message="Invalid command. Please enter 'up' or 'down'."):
        self.message = message
        super().__init__(message)
        logging.error(f"Raised exception: {message}")


if __name__ == "__main__":
    main()
